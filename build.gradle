plugins {
	id "com.diffplug.spotless" version "6.25.0"
	id "architectury-plugin" version "3.4-SNAPSHOT"
	id "dev.architectury.loom" version "1.5-SNAPSHOT" apply false
	id "io.github.pacifistmc.forgix" version "1.2.6"
}

architectury {
	minecraft = rootProject.minecraft_version
}

forgix {
	group = "com.faboslav.variantsandventures"
	mergedJarName = "${rootProject.mod_id}-mc${rootProject.minecraft_version}-${rootProject.mod_version}.jar"
	outputDir = "build/libs/merged"

	if (findProject(":fabric"))
		fabric {
			projectName = "fabric"
			jarLocation = "build/libs/${rootProject.mod_id}-fabric-mc${rootProject.minecraft_version}-${rootProject.mod_version}.jar"
		}

	if (findProject(":forge"))
		forge {
			projectName = "forge"
			jarLocation = "build/libs/${rootProject.mod_id}-forge-mc${rootProject.minecraft_version}-${rootProject.mod_version}.jar"
		}

	if (findProject(":neoforge"))
		custom {
			projectName = "neoforge"
			jarLocation = "build/libs/${rootProject.mod_id}-forge-mc${rootProject.minecraft_version}-${rootProject.mod_version}.jar"
		}
}

spotless {
	java {
		// Use the default importOrder configuration
		importOrder()
		// importOrder('java|javax', 'com.acme', '', '\\#com.acme', '\\#')
		removeUnusedImports()

		// Cleanthat will refactor your code, but it may break your style: apply it before your formatter
		cleanthat()          // has its own section below

		// Choose one of these formatters.
		googleJavaFormat()   // has its own section below
		eclipse()            // has its own section below
		prettier()           // has its own section below
		clangFormat()        // has its own section below

		formatAnnotations()  // fixes formatting of type annotations, see below

		licenseHeader '/* (C) $YEAR */' // or licenseHeaderFile
	}
}

subprojects {
	apply plugin: "dev.architectury.loom"

	loom {
		silentMojangMappingsLicense()
	}

	dependencies {
		minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
		mappings "net.fabricmc:yarn:${rootProject.yarn_mappings}"
	}
}

allprojects {
	apply plugin: "java"
	apply plugin: "architectury-plugin"

	group = rootProject.maven_group
	version = rootProject.mod_version
	archivesBaseName = "${rootProject.mod_id}-mc${rootProject.minecraft_version}"

	repositories {
		maven {
			name = "Jitpack"
			url 'https://jitpack.io/'
		}
	}

	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"
		options.release = 17
	}

	java {
		withSourcesJar()
	}
}
